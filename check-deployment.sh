#!/bin/bash
# Script de validation du d√©ploiement CircleProtek

echo "üöÄ === VALIDATION DU D√âPLOIEMENT CIRCLEPROTEK ==="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SUCCESS=0
WARNINGS=0
ERRORS=0

# Fonction pour afficher les r√©sultats
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
        ((SUCCESS++))
    else
        echo -e "${RED}‚ùå $2${NC}"
        ((ERRORS++))
    fi
}

check_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

echo -e "${BLUE}üìÇ === V√âRIFICATION DES FICHIERS PRINCIPAUX ===${NC}"

# V√©rifier les fichiers HTML principaux
[ -f "index.html" ] && check_result 0 "index.html pr√©sent" || check_result 1 "index.html manquant"
[ -f "articles.html" ] && check_result 0 "articles.html pr√©sent" || check_result 1 "articles.html manquant"

# V√©rifier les fichiers CSS et JS
[ -f "styles.css" ] && check_result 0 "styles.css pr√©sent" || check_result 1 "styles.css manquant"
[ -f "script.js" ] && check_result 0 "script.js pr√©sent" || check_result 1 "script.js manquant"
[ -f "js/menu.js" ] && check_result 0 "js/menu.js pr√©sent" || check_result 1 "js/menu.js manquant"
[ -f "js/articles.js" ] && check_result 0 "js/articles.js pr√©sent" || check_result 1 "js/articles.js manquant"

# V√©rifier le favicon
[ -f "favicon.ico" ] && check_result 0 "favicon.ico pr√©sent" || check_result 1 "favicon.ico manquant"

echo ""
echo -e "${BLUE}üìä === V√âRIFICATION DES FICHIERS JSON ===${NC}"

# V√©rifier les fichiers JSON de donn√©es
[ -f "cameras.json" ] && check_result 0 "cameras.json pr√©sent" || check_result 1 "cameras.json manquant"
[ -f "gps-trackers.json" ] && check_result 0 "gps-trackers.json pr√©sent" || check_result 1 "gps-trackers.json manquant"
[ -f "security-doors.json" ] && check_result 0 "security-doors.json pr√©sent" || check_result 1 "security-doors.json manquant"
[ -f "systems.json" ] && check_result 0 "systems.json pr√©sent" || check_result 1 "systems.json manquant"
[ -f "home-security.json" ] && check_result 0 "home-security.json pr√©sent" || check_result 1 "home-security.json manquant"

echo ""
echo -e "${BLUE}üñºÔ∏è  === V√âRIFICATION DES IMAGES ===${NC}"

# V√©rifier les dossiers d'images
[ -d "images/" ] && check_result 0 "Dossier images/ pr√©sent" || check_result 1 "Dossier images/ manquant"
[ -d "images/hero/" ] && check_result 0 "Dossier images/hero/ pr√©sent" || check_result 1 "Dossier images/hero/ manquant"
[ -d "images/logos/" ] && check_result 0 "Dossier images/logos/ pr√©sent" || check_result 1 "Dossier images/logos/ manquant"

# V√©rifier l'image hero optimis√©e
[ -f "images/hero/family-home-security-hero-optimized.jpg" ] && check_result 0 "Image hero optimis√©e pr√©sente" || check_result 1 "Image hero optimis√©e manquante"

echo ""
echo -e "${BLUE}üìÑ === V√âRIFICATION DES ARTICLES ===${NC}"

# Compter les articles
ARTICLE_COUNT=$(find articles/html/ -name "*.html" 2>/dev/null | wc -l)
if [ $ARTICLE_COUNT -gt 10000 ]; then
    check_result 0 "Articles HTML pr√©sents ($ARTICLE_COUNT articles)"
else
    check_result 1 "Nombre d'articles insuffisant ($ARTICLE_COUNT articles)"
fi

echo ""
echo -e "${BLUE}‚öôÔ∏è  === V√âRIFICATION DE LA CONFIGURATION ===${NC}"

# V√©rifier robots.txt
[ -f "robots.txt" ] && check_result 0 "robots.txt pr√©sent" || check_result 1 "robots.txt manquant"

# V√©rifier les scripts de d√©ploiement
DEPLOY_SCRIPTS=$(ls deploy-*.sh 2>/dev/null | wc -l)
if [ $DEPLOY_SCRIPTS -gt 0 ]; then
    check_result 0 "Scripts de d√©ploiement pr√©sents ($DEPLOY_SCRIPTS scripts)"
else
    check_warning "Aucun script de d√©ploiement trouv√©"
fi

echo ""
echo -e "${BLUE}üîç === V√âRIFICATION DU CONTENU HTML ===${NC}"

# V√©rifier que les fichiers HTML n'ont pas de favicon.svg manquant
if grep -q "favicon.svg" index.html 2>/dev/null; then
    check_result 1 "index.html contient encore des r√©f√©rences √† favicon.svg"
else
    check_result 0 "index.html utilise correctement favicon.ico"
fi

if grep -q "favicon.svg" articles.html 2>/dev/null; then
    check_result 1 "articles.html contient encore des r√©f√©rences √† favicon.svg"
else
    check_result 0 "articles.html utilise correctement favicon.ico"
fi

# V√©rifier que articles.html utilise le JavaScript externe
if grep -q "js/articles.js" articles.html 2>/dev/null; then
    check_result 0 "articles.html utilise le JavaScript externe"
else
    check_result 1 "articles.html n'utilise pas le JavaScript externe"
fi

echo ""
echo -e "${BLUE}üìê === V√âRIFICATION DE LA TAILLE DES FICHIERS ===${NC}"

# V√©rifier la taille des fichiers principaux
INDEX_SIZE=$(wc -c < "index.html" 2>/dev/null || echo "0")
ARTICLES_SIZE=$(wc -c < "articles.html" 2>/dev/null || echo "0")
CSS_SIZE=$(wc -c < "styles.css" 2>/dev/null || echo "0")

if [ $INDEX_SIZE -lt 50000 ]; then
    check_result 0 "index.html a une taille raisonnable ($(echo $INDEX_SIZE | numfmt --to=iec-i)B)"
else
    check_warning "index.html est volumineux ($(echo $INDEX_SIZE | numfmt --to=iec-i)B)"
fi

if [ $ARTICLES_SIZE -lt 50000 ]; then
    check_result 0 "articles.html a une taille raisonnable ($(echo $ARTICLES_SIZE | numfmt --to=iec-i)B)"
else
    check_warning "articles.html est volumineux ($(echo $ARTICLES_SIZE | numfmt --to=iec-i)B)"
fi

echo ""
echo -e "${BLUE}üåê === R√âSUM√â DE LA VALIDATION ===${NC}"

echo ""
echo -e "${GREEN}‚úÖ Succ√®s: $SUCCESS${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Avertissements: $WARNINGS${NC}"
echo -e "${RED}‚ùå Erreurs: $ERRORS${NC}"

echo ""
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ === SITE PR√äT POUR LE D√âPLOIEMENT ===${NC}"
    echo ""
    echo -e "${BLUE}üìã Prochaines √©tapes:${NC}"
    echo "1. Ex√©cuter un script de d√©ploiement (deploy-*.sh)"
    echo "2. Tester le site sur le serveur"
    echo "3. V√©rifier les liens et fonctionnalit√©s"
    exit 0
else
    echo -e "${RED}üö´ === PROBL√àMES D√âTECT√âS ===${NC}"
    echo ""
    echo "Corrigez les erreurs avant de d√©ployer."
    exit 1
fi